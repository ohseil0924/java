package kr.or.ddit.basic;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

// JDBC (java DataBase Connectivity) 라이브러리를 이용한 DB자료 처리하

public class JdbcTest01 {
/*
  	JDBC를 이용한 DB 처리 순서
  	1. 드라이버 로딩 > 라이브러리를 사용할 수 있게 메모리에 읽어 들이는 작업
  		Class.forName("oracle.jdbc.driver.OracleDriver");	//대소문자도 바뀌면 안됨!
  		
  	2. DB에 접속하기 > 접속이 완료되면 Connection 객체가 반환된다.
  		DriverManager.getConnection() 매서드를 이용한다.
  		
  	3. 질의 > SQL 문을 작성해서 DB서버로 보내고 그 결과를 얻어온다.
  	 	(Statement객체나 PreparedStatement 객체를 이용하요 작업한다.)
  	 	
  	4. 결과 처리 > 질의 결과를 받아서 원하는 작업을 수행한다.
  		1) SQL문이 select 문일 경우에는 select한 결과가 ResultSet 객체에 저장되어 반환된다.
  	  	2) SQL문이 select 문이 아닐경우 (insert, update, delete, create 등)에는 정수값이 반환된다.
  	  		(이 정수값은 보통 해당 명령의 실행에 성공한 레코드 수가 된다.)
  	  		
  	5. 사용한 자원 반납하기 > close()매서드 이용

 */
	
	public static void main(String[] args) {
		// DB작업에 필요한 객체를 선언
		Connection 	conn = null; 	//db와 연결이 잘 됬는지 볼수 있는데 커넥션 객체를 만들어야 함
		Statement stmt = null;	//import할때 sql껄로
		ResultSet rs = null;	// select문이 사용될 대안 선언
		
		try {
			// 1. 드라이버 로딩
			Class.forName("oracle.jdbc.driver.OracleDriver"); 	//마우스 대서 두번째꺼 클릭
			
			//2. DB연결 < connection 객체 생성
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"YJS07", 
					"java");
			
			//3-1. SQL문 작성
			String sql = "select * from lprod";
			
			//3-2. Statement 객체 생성 > Connection 객체 이용
			//		> sql 문을 실행하고 결과를 얻어오는 객체 생성
			stmt = conn.createStatement();
			
			//3-3 SQL문을 DB 서버로 보내서 결과를 얻어온다.
			//		(지금은 실행할 SQL문이 select 문이기 때문에
			//		결과가 ResultSet 객체에 저장되어 반환한다.
			rs = stmt.executeQuery(sql);	//실행할 쿼리문이 selet문이기 때문에 rs에 저장되어 반환된다.
			
			//4. 결과 처리하기 > 한 레코드씩 화면에 출력하기
			System.out.println(" == 쿼리문 처리 결과 ==");
			
			//	ResultSet객체에 저장된 데이터를 차례로 꺼내오려면 
			//	반복문과 next()매서드를 이용한다.
			// rs.next() > ResultSet객체의 데이터를 가리키는 포인터를 다음번째의 
			//레코드로 이동시키고 그곳에 데이터가 있으면 true를 반환한다.
			
			while(rs.next()){
			// 포인터가 가리키는 곳의 데이터를 가져오는 방법
			// 1) rs.get자료형이름("컬럼명")
			// 2) rs.get자료형이름(컬럼번호) > 컬럼번호는 1번부터 시작(0번부터 XX)
			// 3) rs.get자료형이름("컬럼의 Alias명")
			System.out.println("Lprod_id : " + rs.getInt("lprod_id"));		//쿼리문은 대소문자를 섞어써도 된다.
			System.out.println("Lprod_gu : " + rs.getString(2));	//컬럼번호
			System.out.println("Lprod_nm : " + rs.getString("LPROD_NM"));
			System.out.println("--------------------------");
			}
			System.out.println(" == 출력끝 == ");
			
		} catch (SQLException e) {
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}finally{
			//5번 자원반납하기
			if(rs!=null) try{rs.close(); }catch(SQLException e){}
			if(stmt!=null) try{rs.close(); }catch(SQLException e){}
			if(conn!=null) try{rs.close(); }catch(SQLException e){}
		}
	}

}































