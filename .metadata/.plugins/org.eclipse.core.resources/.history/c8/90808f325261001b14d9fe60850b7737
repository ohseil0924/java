package kr.or.ddit.basic;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class JdbcTest05 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		Connection conn = null;
		Statement stmt = null;
		PreparedStatement pstmt = null;	//셀렉트 문 안쓸떄는 resualt set 안써도 됨
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"YJS07", 
					"java");
			System.out.println("게좌번호 정보 추가하기");
			System.out.println("계좌번호 : ");
			String bankNo = sc.next();
			
			System.out.println("은행명 : ");
			String bankName = sc.next();
			
			System.out.println("예금주 명 : ");
			String userName = sc.next();
			
			/*//Statement객체 이용하기============================================================
			 * 	- 쿼리문을 만들어서 실행할때 쿼리문을 준다.
			 * >>>실행할때마다 컴파일을 그때그때 한다.
			String sql = "insert into bankinfo" 
					+ "(bank_no, bank_name, bank_user_name, bank_date)"
					+ "values ('" + bankNo + "','" + bankName  
					+ "','" + userName + "', sysdate )";
					
			System.out.println("SQL : " + sql);
			
			stmt = conn.createStatement();
			
			//Sql 문이 select문일 때 실행하는 매서드는 execumentQuery()매서드를 사용하고
			//Sql문이 insert update delete 등과 같이 select문이 아닐경우에는 executeUpdate() 매서드를 사용하여 실행한다
			//executeUpdate() 매서드의 반환값은 작업에 성공한 레코드 수이다.
			int cnt = stmt.executeUpdate(sql);
			======================================================================================*/
			
			
			
			// PreparedStatement객체 이용하기 [보통 많이 쓰임]
			// SQL문을 작성할 때 SQL문에 데이터가 들어갈 자리를 물음표(?)로 표시해서 작성한다.
			String sql = "insert into bankinfo" 
					+ "(bank_no, bank_name, bank_user_name, bank_date)"
					+ "values (?, ?, ?, sysdate )";
			
			//PreparedStatement객체 생성하기
			// > 실행할 sql문을 인수값으로 지정하여 생성한다.
			pstmt = conn.prepareStatement(sql);
			
			//sql 문의 물음표(?) 자리에 들어갈 데이터를 셋팅한다.
			// 형식) pstmt.set자료형 이름(물음표 번호, 데이터);
			//		> 물음표 번호는 1번부터 시작한다.
			pstmt.setString(1, bankNo);
			pstmt.setString(2, bankName);
			pstmt.setString(3, userName);
			
			// 데이터의 셋팅이 완료되면? sql문을 시행
			int cnt = pstmt.executeUpdate();	//★sql쿼리문은 안들어간다!!★
			
			System.out.println("반환값 : " + cnt);
			
		} catch (SQLException e) {
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}finally{
			if(stmt!=null) try{stmt.close(); }catch(SQLException e){}
			if(pstmt!=null) try{pstmt.close(); }catch(SQLException e){}
			if(conn!=null) try{conn.close(); }catch(SQLException e){}
		}
		
		
		

	}

}

