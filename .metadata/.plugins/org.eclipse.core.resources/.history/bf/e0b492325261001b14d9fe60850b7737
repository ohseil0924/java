package kr.or.ddit.basic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

import kr.or.ddit.util.DBUtil;
import kr.or.ddit.util.DBUtil3;

public class jdbd_sem {
   private Scanner sc = new Scanner(System.in);
   
   public static void main(String[] args) {

      new jdbd_sem().memberStart();
      
      
   }
   
   public void memberStart(){
      while(true){
         int choice = displayMenu();
         
         switch (choice) {
         case 1://추가
            insertMember();
            
            break;
         
         case 2://삭제
            deleteMember();
            
            break;
         
         case 3://수정
            updateMember();
            break;

         case 4://전체 출력
            displayMember();
            break;
            
         case 5 : //자려수정2
        	 updateMember2();

         case 0://작업종료
            System.out.println("작업을 마칩니다.");
            /*System.exit(0);*/
            return;
         
         default:
            System.out.println("번호를 잘못 입력했습니다.");
         }
      }
   }
   
   

   //메뉴 출력 및 작업번호를 입력받아 반환하는 메서드
   private int displayMenu(){
      System.out.println();
      System.out.println("--------------- 작업 선택  ---------------");
      System.out.println("1. 자료추가");
      System.out.println("2. 자료삭제");
      System.out.println("3. 자료수정");
      System.out.println("4. 전체자료출력");
      System.out.println("5. 자료수정 2"); //원하는 항목 하나만 수정
      System.out.println("0. 작업종료");
      System.out.println("--------------------------------------");
      System.out.println("작업선택 >>");
      int num = Integer.parseInt(sc.nextLine());
      
      return num;
   }
   
   //회원 정보를 수정하는 매서드(원하는 컬럼 한가지만 수정한다)
   private void updateMember2(){

	   Connection conn = null;
	   PreparedStatement ps = null;
	   
	   System.out.println("");
	   System.out.println("수정할 회원정보를 입력하세요");
	   
	   System.out.println("회원ID>>");
	   String memId = sc.nextLine();
	   
	   int count = getMemberCount(memId);
	   
	   if(count == 0){
		   System.out.println(memId + "회원은 없는 회원 ID입니다");
		   System.out.println("수정작업을 마칩니다");
		   return;
	   }else{
		   System.out.println("수정하고 싶은 항목 번호를 눌러주세요");
		   System.out.println("1.이름 2.전화번호 3.회원주소 4.돌아가기");
		   int input = sc.nextInt();
		   switch(input){
		   case 1 :
			   System.out.println("새로운 회원이름>");
			   String memName = sc.next();
			   
			   try {
				   conn = DBUtil.getConnection();
				   
				   String sql = "UPDATE MYMEMBER SET "
						   		+"MEM_NAME = ? "
						   		+"WHERE MEM_ID = ?";
				   ps = conn.prepareStatement(sql);
				   ps.setString(1, memName);
				   ps.setString(2, memId);
				   
				   int cnt = ps.executeUpdate();
				   if(cnt > 0){
					   System.out.println("이름수정 성공!");
				   }else{
					   System.out.println("이름 수정 실패");
				   }
				   
			} catch (SQLException e) {
				e.printStackTrace();
			} finally{
				if(conn != null) try{conn.close();} catch(SQLException e){}
		         if(ps != null) try{ps.close();} catch(SQLException e){}
			}
			   return;
			   
		   case 2 : 
			   System.out.println("새로운 전화번호");
			   String memTel1 = sc.next();
			   
			   try {
				   conn = DBUtil.getConnection();
				   
				   String sql = "UPDATE MYMEMBER SET "
						   		+"MEM_TEL = ? "
						   		+"WHERE MEM_ID = ?";
				   ps = conn.prepareStatement(sql);
				   ps.setString(1, memTel1);
				   ps.setString(2, memId);
				   
				   int cnt = ps.executeUpdate();
				   if(cnt>0){
					   System.out.println("전화번호 수정 성공");
				   }else{
					   System.out.println("전화번호 수정 실패");
				   }
				
			} catch (SQLException e) {
				e.printStackTrace();
			}finally{
				if(conn != null) try{conn.close();} catch(SQLException e){}
		         if(ps != null) try{ps.close();} catch(SQLException e){}
			}
			   return;
		   case 3 :
			   System.out.println("새로운 주소");
			   String memAddr = sc.next();
			   
			   try {
				   conn = DBUtil.getConnection();
				   
				   String sql = "UPDATE MYMEMBER SET "
						   		+"MEM_TEL = ? "
						   		+"WHERE MEM_ID = ?";
				   ps = conn.prepareStatement(sql);
				   ps.setString(1, memAddr);
				   ps.setString(2, memId);
				   
				   int cnt = ps.executeUpdate();
				   if(cnt>0){
					   System.out.println("전화번호 수정 성공");
				   }else{
					   System.out.println("전화번호 수정 실패");
				   }
				
			} catch (SQLException e) {
				e.printStackTrace();
			}finally{
				if(conn != null) try{conn.close();} catch(SQLException e){}
		         if(ps != null) try{ps.close();} catch(SQLException e){}
			}
			   return;
			   
		   case 4 : return;
		   
		   }
		   
		   
	   }
	   
   }
   
   
   
   
   
   
   
   //회원 정보를 추가하는 메서드
   private void insertMember() {
      
      //Insert만 할거라서 resultset은 없어도 된다.
      Connection conn = null;
      PreparedStatement ps = null;
      
      System.out.println();
      System.out.println("추가할 회원정보를 입력하세요.");
      
      
      int count = 0;
      String memId; //입력한 회원ID가 저장될 변수
      
      do{
         System.out.println("회원ID >> ");
         memId = sc.nextLine();
         
         count = getMemberCount(memId);
         if(count > 0){
            System.out.println("회원ID가 " + memId + "인 회원은 이미 존재 합니다.");
            System.out.println("다른 ID로 다시 입력하세요.");
            System.out.println();
         }
         
      }while(count > 0);

      
      System.out.println("회원이름 >> ");
      String memName = sc.nextLine();
      
      System.out.println("전화번호>>");
      String memTel = sc.nextLine();
      
      System.out.println("주소>>");
      String memAddr = sc.nextLine();
      
      
      try {
         conn = DBUtil.getConnection();
         
         String sql = "INSERT INTO MYMEMBER "
               + " (MEM_ID, MEM_NAME, MEM_TEL, MEM_ADDR) "
               + " VALUES(?, ?, ?, ?)";
         
         ps = conn.prepareStatement(sql);
         ps.setString(1, memId);
         ps.setString(2, memName);
         ps.setString(3, memTel);
         ps.setString(4, memAddr);
         
         int cnt = ps.executeUpdate();
         
         if(cnt>0){
            System.out.println(memId + "회원 추가 성공");
         }else{
            System.out.println(memId + "회원 추가 실패");
         }
         
      } catch (SQLException e) {
         

      } finally{

         if(conn != null) try{conn.close();} catch(SQLException e){}
         if(ps != null) try{ps.close();} catch(SQLException e){}

      }
      
      
      
   }
   
   
   //회원ID를 인수로 받아서 해당 회원ID의 개수를 반환하는 메서드
   private int getMemberCount(String memId){ //회원아이디를 매개변수한다.
      Connection conn = null;
      PreparedStatement ps = null;
      ResultSet rs = null;
      
      int count = 0; // 회원ID개수가 저장될 변수
      
      try {
         conn = DBUtil.getConnection();
         
         String sql = "SELECT COUNT(*) CNT FROM MYMEMBER WHERE MEM_ID = ?";
         
         ps = conn.prepareStatement(sql);
         ps.setString(1, memId);
         
         rs = ps.executeQuery();
         
         if(rs.next()){
            count = rs.getInt("cnt");
         }
         
         
      } catch (SQLException e) {
         e.printStackTrace();
         
      }finally{
         if(rs != null) try{rs.close();} catch(SQLException e){}
         if(conn != null) try{conn.close();} catch(SQLException e){}
         if(ps != null) try{ps.close();} catch(SQLException e){}
      }
      
      return count;
      
   
   }
   
   

   
   
   
   
   
   //전체 회원 정보를 출력하는 메서드
   private void displayMember(){
      Connection conn = null;
      Statement stat = null;
      ResultSet rs = null;
      
      System.out.println();
      System.out.println("-----------------------------------------");
      System.out.println("ID      이름        전화번호         주소");
      System.out.println("-----------------------------------------");

   
      try {
         conn = DBUtil3.getConnection();
         
         String sql = "select * from mymember";
         stat = conn.createStatement();
         
         rs = stat.executeQuery(sql);
         
         while(rs.next()){
            String memId = rs.getString("mem_id");
            String memName = rs.getString("mem_name");
            String memTel = rs.getString("mem_tel");
            String memAddr = rs.getString("mem_addr");
            System.out.println(memId + "\t" + memName + "\t" + memTel + "\t" + memAddr + "\t");
         }
         System.out.println("-----------------------------------------");
         System.out.println("출력끝");
               
      } catch (SQLException e) {
         // TODO: handle exception
      } finally{
         if(rs != null) try{rs.close();} catch(SQLException e){}
         if(conn != null) try{conn.close();} catch(SQLException e){}
         if(stat != null) try{stat.close();} catch(SQLException e){}
      }
   }
   
   //회원정보를 삭제하는 메서드
   private void deleteMember(){
      Connection conn = null;
      PreparedStatement ps = null;
      
      System.out.println();
      System.out.println("삭제할 회원정보를 입력해주세요.");
      System.out.println("삭제할 회원ID >>");
      String memId = sc.nextLine();
      
      try {
         conn = DBUtil.getConnection();
         
         String sql = "DELETE FROM MYMEMBER WHERE MEM_ID=?";
         ps = conn.prepareStatement(sql);
         ps.setString(1, memId);
         
         int cnt = ps.executeUpdate();
         
         if(cnt > 0){
            System.out.println(memId + "회원정보 삭제 성공!!!");
         }else{
            System.out.println(memId + "회원은 등록 안된 회원이거나 삭제에 실패했습니다...");
         }
         
         
      } catch (SQLException e) {
         e.printStackTrace();
         
      }finally{
         if(conn != null) try{conn.close();} catch(SQLException e){}
         if(ps != null) try{ps.close();} catch(SQLException e){}
      }
      
   }
   
   //회원정보를 수정하는 메서드
   private void updateMember(){
      
      Connection conn = null;
      PreparedStatement ps = null;
      
      System.out.println();
      System.out.println("수정할 회원 정보를 입력하세요..");
      
      System.out.print("회원ID >> ");
      String memId = sc.nextLine();
      
      //나머지 데이터를 입력하기 전에 memId가 있는지 확인한다.
      int count = getMemberCount(memId);
      
      if(count == 0){//없는 회원이면....
         System.out.println(memId + "회원은 없는 회원ID 입니다.");
         System.out.println("수정작업을 마칩니다.");
         return; // 메서드가 끝나게 된다.
      }
      
      System.out.print("새로운 회원이름>> ");
      String memName = sc.nextLine();
      
      System.out.println("새로운 회원 전화번호>>");
      String memTel = sc.nextLine();
      
      System.out.println("새로운 회원주소>>");
      String memAddr = sc.nextLine();
      
      
      try{
         conn = DBUtil.getConnection();
         
         String sql = "UPDATE MYMEMBER SET "
               + " MEM_NAME = ? , "
               + " MEM_TEL = ?,"
               + " MEM_ADDR = ?"
               + " WHERE MEM_ID = ?";
         
         ps = conn.prepareStatement(sql);
         ps.setString(1, memName);
         ps.setString(2, memTel);
         ps.setString(3, memAddr);
         ps.setString(4, memId);

         int cnt = ps.executeUpdate();
         
         if(cnt > 0){
            System.out.println(memId + "회원정보를 변경하였습니다!!!");
         }else{
            System.out.println("수정 작업 실패");
         }
         
      }catch(SQLException e){
         e.printStackTrace();
         
      }finally{
         if(conn != null) try{conn.close();} catch(SQLException e){}
         if(ps != null) try{ps.close();} catch(SQLException e){}
      }
   
   }
   

}