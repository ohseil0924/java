package kr.or.ddit.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ResourceBundle;
import java.util.logging.Logger;

//JDBC드라이버를 로딩하고(메모리에 저장시키고) connection객체를 생성하는 매서드로 구성된 class 만들기
// 메모리에 기억시켜놓는 작업은 한번만 해줘도 된다!

//ResourceBundle 객체 이용하기

public class DBUtil3 {
	private static final Logger logger = 
				Logger.getLogger(DBUtil3.class);
	
	
	private static ResourceBundle bundle; //ResourceBundle 객체 변수선언
	
	static{	//static 초기화블럭
		bundle = ResourceBundle.getBundle("dbinfo");	//객체생성및 파일 읽어오기
		Logger.info("ResourceBundle객체 생성 - dbinfo.properties 파일 읽기")
		
		
		
		try {
			//Class.forName("oracle.jdbc.driver.OracleDriver");
			
			Class.forName(bundle.getString("driver"));
			Logger.trace("DB 드라이버 로딩 성공!!!");
			
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패~~");
			logger.error("드라이버 로딩 실패 !" + )
			e.printStackTrace();
		}
	}
	//DB에 접속하고 접속에 성공하면 Connection 객체를 반환하는 매서드
	public static Connection getConnection(){
		try {
			return DriverManager.getConnection(
					bundle.getString("url"),
					bundle.getString("user"),
					bundle.getString("pass")	);
/*			return DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"OSI09","jaba"
					);
*/		} catch (SQLException e) {
			System.out.println("DB연결실패~~");
			return null;
			}
	}
}

